from syntax import Highlighter, bind
from syntax.doxygen import tryDoxygenComment

class CHighlighter(Highlighter):
    name = 'c'
    extensions = ('.c','.h','.cpp','.hpp','.c++','.h++','.cc','.hh')

    doxygenDocstrings = False

    keywords = [
        "while","if","for","continue","return","break","switch","case","sizeof",
        "struct","union","typedef","do","default","else","goto",
        "alignas","alignof","offsetof","asm","__asm__",
        "public","private","class","using","namespace","virtual","override","protected",
        "template","typename","static_cast","throw"
    ]

    types = [
        "static","int","char","short","float","double","void","unsigned","volatile","const",
        "register","long","inline","restrict","enum","auto","extern","bool","complex",
        "uint8_t","uint16_t","uint32_t","uint64_t",
        "int8_t","int16_t","int32_t","int64_t","FILE",
        "ssize_t","size_t","uintptr_t","intptr_t","__volatile__",
        "constexpr"
    ]

    special = [
        "NULL",
        "stdin","stdout","stderr",
        "STDIN_FILENO","STDOUT_FILENO","STDERR_FILENO"
    ]

    preprocessor_base_state = 5

    def paintCString(self):
        let last = None
        while self[0] != None:
            if last != '\\' and self[0] == '"':
                self.paint(1, self.FLAG_STRING)
                return 0
            else if self[0] == '\\' and not self[1]:
                self.paint(1, self.FLAG_ESCAPE)
                return 4
            else if self[0] == '\\' and self[1] in 'nr\\':
                self.paint(2, self.FLAG_ESCAPE)
                last = None
            else if self[0] == '\\' and self[1] in '01234567':
                self.paint(2, self.FLAG_ESCAPE)
                if self[0] in '01234567':
                    self.paint(1, self.FLAG_ESCAPE)
                    if self[0] in '01234567':
                        self.paint(1, self.FLAG_ESCAPE)
                last = None
            else if self[0] == '%':
                self.paint(1, self.FLAG_ESCAPE)
                if self[0] == '%':
                    self.paint(1, self.FLAG_ESCAPE)
                else:
                    while self[0] in '-#*0+': self.paint(1, self.FLAG_ESCAPE)
                    while self.isdigit(self[0]): self.paint(1, self.FLAG_ESCAPE)
                    if self[0] == '.':
                        self.paint(1, self.FLAG_ESCAPE)
                        if self[0] == '*': self.paint(1, self.FLAG_ESCAPE)
                        else: while self.isdigit(self[0]): self.paint(1, self.FLAG_ESCAPE)
                    while self[0] in 'lz': self.paint(1, self.FLAG_ESCAPE)
                    if self[0] in '"\\': continue
                    self.paint(1, self.FLAG_ESCAPE)
            else if self[0] == '\\' and self[1] == 'x':
                self.paint(2, self.FLAG_ESCAPE)
                while self.isxdigit(self[0]): self.paint(1, self.FLAG_ESCAPE)
            else if self.doxygenDocstrings and tryDoxygenComment(self, self.FLAG_STRING):
                continue
            else:
                last = self[0]
                self.paint(1, self.FLAG_STRING)
        return 0

    def paintCChar(self):
        self.paint(1, self.FLAG_NUMERAL)
        let last = None
        while self[0] != None:
            if last != '\\' and self[0] == "'":
                self.paint(1, self.FLAG_NUMERAL)
                return
            else if last == '\\' and self[0] == '\\':
                self.paint(1, self.FLAG_NUMERAL)
                last = None
            else:
                last = self[0]
                self.paint(1, self.FLAG_NUMERAL)

    def paintCComment(self):
        let last = None
        while self[0] != None:
            if self.commentBuzzwords(): continue
            if tryDoxygenComment(self): continue
            else if last == '*' and self[0] == '/':
                self.paint(1, self.FLAG_COMMENT)
                return 0
            else:
                last = self[0]
                self.paint(1, self.FLAG_COMMENT)
        return 1

    def paintCPragma(self):
        while self[0] != None:
            if self[0] == '"':
                self.paint(1, self.FLAG_STRING)
                let result = self.paintCString()
                if result != 0: return result
            else if self[0] == "'":
                self.paintCChar()
            else if self[0] == '\\' and self[1] == None:
                self.paint(1, self.FLAG_PRAGMA)
                return 2
            else if self.findKeywords(self.keywords, self.FLAG_KEYWORD, self.cKeywordQualifier):
                continue
            else if self.findKeywords(self.types, self.FLAG_TYPE, self.cKeywordQualifier):
                continue
            else if self[0] == '/' and self[1] == '/':
                self.paintComment()
                return None
            else if self[0] == '/' and self[1] == '*':
                if self.paintCComment() == 1: return 3
                continue
            else:
                self.paint(1, self.FLAG_PRAGMA)
        return 0

    def paintCNumeral(self):
        if self[0] == '0' and (self[1] == 'x' or self[1] == 'X'):
            self.paint(2, self.FLAG_NUMERAL)
            while self.isxdigit(self[0]): self.paint(1, self.FLAG_NUMERAL)
        else if self[0] == '0' and self[1] == '.':
            self.paint(2, self.FLAG_NUMERAL)
            while self.isdigit(self[0]): self.paint(1, self.FLAG_NUMERAL)
            if self[0] == 'f': self.paint(1, self.FLAG_NUMERAL)
            return 0
        else if self[0] == '0':
            self.paint(1, self.FLAG_NUMERAL)
            while self[0] in '01234567': self.paint(1, self.FLAG_NUMERAL)
        else:
            while self.isdigit(self[0]): self.paint(1, self.FLAG_NUMERAL)
            if self[0] == '.':
                self.paint(1, self.FLAG_NUMERAL)
                while self.isdigit(self[0]): self.paint(1, self.FLAG_NUMERAL)
                if self[0] == 'f': self.paint(1, self.FLAG_NUMERAL)
                return 0
        while self[0] in 'uUlL': self.paint(1, self.FLAG_NUMERAL)
        return 0

    def calculate(self):
        let cond = self.state
        if cond <= 0:
            while self[0]:
                if self[0] == '#':
                    for i in range(self.i):
                        if self[-i-1] != ' ' and self[-i-1] != '\t':
                            self.skip()
                            continue
                    self.paint(1, self.FLAG_PRAGMA)
                    while self[0] == ' ':
                        self.paint(1, self.FLAG_PRAGMA)
                    if self.matchAndPaint("include", self.FLAG_PRAGMA, self.cKeywordQualifier):
                        while self[0] == ' ':
                            self.paint(1, self.FLAG_PRAGMA)
                        if self[0] == '<':
                            self.paint(1, self.FLAG_STRING)
                            while self[0] != '>' and self[0] != None:
                                self.paint(1, self.FLAG_STRING)
                            if self[0] != None:
                                self.paint(1, self.FLAG_STRING)
                    else if self.matchAndPaint("if", self.FLAG_PRAGMA, self.cKeywordQualifier):
                        if self[0] == ' ' and self[1] == '0' and self[2] == None:
                            self.paint(2, self.FLAG_COMMENT)
                            self.rewind(6)
                            self.paint(-1, self.FLAG_COMMENT)
                            return self.preprocessor_base_state
                    else if self.matchAndPaint("else", self.FLAG_PRAGMA, self.cKeywordQualifier):
                        # Do nothing?
                    return self.paintCPragma()
                else if self[0] == '/' and self[1] == '/':
                    self.paintComment()
                else if self[0] == '/' and self[1] == '*':
                    self.paint(2, self.FLAG_COMMENT)
                    return self.paintCComment()
                else if self.findKeywords(self.keywords, self.FLAG_KEYWORD, self.cKeywordQualifier):
                    continue
                else if self.findKeywords(self.types, self.FLAG_TYPE, self.cKeywordQualifier):
                    continue
                else if self.findKeywords(self.special, self.FLAG_NUMERAL, self.cKeywordQualifier):
                    continue
                else if self[0] == '"':
                    self.paint(1, self.FLAG_STRING)
                    return self.paintCString()
                else if self[0] == "'":
                    self.paintCChar()
                else if not self.cKeywordQualifier(self[-1]) and self.isdigit(self[0]):
                    self.paintCNumeral()
                else:
                    self.skip()
        else if cond == 1:
            return self.paintCComment()
        else if cond == 2:
            return self.paintCPragma()
        else if cond == 3:
            if self.paintCComment() == 1:
                return 3
            return self.paintCPragma()
        else if cond == 4:
            return self.paintCString()
        else:
            while self[0] == ' ' or self[0] == '\t': self.paint(1, self.FLAG_COMMENT)
            if self[0] == '#':
                self.paint(1, self.FLAG_COMMENT)
                while self[0] == ' ' or self[0] == '\t': self.paint(1, self.FLAG_COMMENT)
                if self.matchAndPaint("if", self.FLAG_COMMENT, self.cKeywordQualifier):
                    self.paint(-1, self.FLAG_COMMENT)
                    return self.state + 1
                else if self.matchAndPaint("else", self.FLAG_COMMENT, self.cKeywordQualifier) or self.matchAndPaint("elif", self.FLAG_COMMENT, self.cKeywordQualifier):
                    self.paint(-1, self.FLAG_COMMENT)
                    if self.state == self.preprocessor_base_state: return 0
                    return self.state
                else if self.matchAndPaint("endif", self.FLAG_COMMENT, self.cKeywordQualifier):
                    self.paint(-1, self.FLAG_COMMENT)
                    if self.state == self.preprocessor_base_state: return 0
                    return self.state - 1
                else:
                    self.paint(-1, self.FLAG_COMMENT)
                    return self.state
            else:
                self.paint(-1, self.FLAG_COMMENT)
                return self.state
        return None

bind(CHighlighter)
