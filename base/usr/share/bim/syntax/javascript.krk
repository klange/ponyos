from syntax import Highlighter, bind
from syntax.c import CHighlighter

class JavascriptHighlighter(Highlighter):
    name = 'javascript'
    extensions = ('.js','.jsx','.ts','.tsx')
    keywords = [
        "abstract","arguments","from",
        "await","break","case","catch","class","const",
        "continue","debugger","default","delete","do","else","enum","eval",
        "export","extends","final","finally","for","function","goto",
        "if","implements","import","in","instanceof","interface","let","long",
        "native","new","package","private","protected","public","return",
        "static","super","switch","synchronized","this","throw","throws",
        "transient","true","try","typeof","volatile","while","with","yield",
    ]
    types = [
        "int","float","double","short","var","void","byte","char","boolean",
    ]
    special = ['true','false','null']
    def paintJSFormatString():
        while self[0]:
            if self[0] == '\\' and self[1] == '`':
                self.paint(2, self.FLAG_ESCAPE)
            else if self[0] == '`':
                self.paint(1, self.FLAG_STRING)
                return 0
            else if self[0] == '\\':
                self.paint(2, self.FLAG_ESCAPE)
            else if self[0] == '$' and self[1] == '{':
                self.paint(2, self.FLAG_NUMERAL)
                while self[0] and self[0] != '}':
                    self.paint(1, self.FLAG_NUMERAL)
                self.paint(1, self.FLAG_NUMERAL)
            else:
                self.paint(1, self.FLAG_STRING)
        return 1
    def calculate():
        if self.state < 1:
            if not self.cKeywordQualifier(self[-1]) and self.isdigit(self[0]):
                CHighlighter.paintCNumeral(self)
                return 0
            else if not self.cKeywordQualifier(self[-1]) and self[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
                while self[0] and self.cKeywordQualifier(self[0]):
                    self.paint(1, self.FLAG_TYPE)
                return 0
            else if self[0] == '/' and self[1] == '/':
                self.paintComment()
            else if self[0] == '/' and self[1] == '*':
                if CHighlighter.paintCComment(self) == 1: return 1
            else if self.findKeywords(self.keywords, self.FLAG_KEYWORD, self.cKeywordQualifier):
                return 0
            else if self.findKeywords(self.types, self.FLAG_TYPE, self.cKeywordQualifier):
                return 0
            else if self.findKeywords(self.special, self.FLAG_NUMERAL, self.cKeywordQualifier):
                return 0
            else if self[0] == '=' and self[1] == '>':
                self.paint(2, self.FLAG_PRAGMA)
                return 0
            else if self[0] == ':' and self.cKeywordQualifier(self[-1]):
                let start = self.i
                while self[-1] and self.cKeywordQualifier(self[-1]):
                    self.rewind(1)
                while self[0] and self.i != start:
                    self.paint(1, self.FLAG_TYPE)
                self.paint(1, self.FLAG_PRAGMA)
                return 0
            else if self[0] == '<':
                self.paint(1, self.FLAG_TYPE)
                while self[0] and (self[0] == '/' or self.cKeywordQualifier(self[0])):
                    self.paint(1, self.FLAG_TYPE)
                return 0
            else if self[0] == '>':
                self.paint(1, self.FLAG_TYPE)
                return 0
            else if self[0] == '"':
                self.paintSimpleString()
                return 0
            else if self[0] == "'":
                self.paintSingleString()
                return 0
            else if self[0] == '`':
                self.paint(1, self.FLAG_STRING)
                if self.paintJSFormatString(): return 2
                return 0
            else if self[0]:
                self.skip()
                return 0
        else if self.state == 1:
            if CHighlighter.paintCComment(self) == 1: return 1
            return 0
        else if self.state == 2:
            if self.paintJSFormatString(): return 2
            return 0
        return None

bind(JavascriptHighlighter)
