from syntax import Highlighter, bind

class LispHighlighter(Highlighter):
    name = 'lisp'
    extensions = ('.lisp','.lsp','.cl')
    parens = [
        Highlighter.FLAG_DIFFPLUS,
        Highlighter.FLAG_TYPE,
        Highlighter.FLAG_PRAGMA,
        Highlighter.FLAG_KEYWORD,
    ]
    def parenFromState(i):
        return self.parens[i % len(self.parens)]
    def calculate():
        if self.state == -1: self.set_state(0)
        while self[0]:
            if self[0] == ';':
                self.paintComment()
            else if self[0] == '(':
                self.paint(1, self.parenFromState(self.state))
                self.set_state(self.state+1)
                while self[0] and self[0] not in ' ()':
                    self.paint(1, self.FLAG_KEYWORD)
            else if self[0] == ')':
                if self.state == 0:
                    self.paint(1, self.FLAG_ERROR)
                else:
                    self.set_state(self.state-1)
                    self.paint(1, self.parenFromState(self.state))
            else if self[0] == ':':
                while self[0] and self[0] not in ' ()':
                    self.paint(1, self.FLAG_PRAGMA)
            else if self[0] == '"':
                self.paintSimpleString()
            else if self[0]:
                self.skip()
        if self.state == 0: return None
        if not self[0]: return self.state
        return None

bind(LispHighlighter)
