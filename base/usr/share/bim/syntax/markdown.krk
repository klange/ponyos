from syntax import Highlighter, bind

from syntax.c import CHighlighter
from syntax.py import PythonHighlighter
from syntax.krk import KrkHighlighter
from syntax.java import JavaHighlighter
from syntax.json import JsonHighlighter
from syntax.xml import XMLHighlighter, HTMLHighlighter
from syntax.diff import DiffHighlighter
from syntax.bash import BashHighlighter
from syntax.make import GnumakeHighlighter

class MarkdownHighlighter(Highlighter):
    name = 'markdown'
    extensions = ('.md',)
    nestables = [
        ('c', 100, CHighlighter),
        ('py', 200, PythonHighlighter),
        ('java', 300, JavaHighlighter),
        ('json', 400, JsonHighlighter),
        ('xml', 500, XMLHighlighter),
        ('html', 600, HTMLHighlighter),
        ('make', 700, GnumakeHighlighter),
        ('diff', 800, DiffHighlighter),
        ('bash', 900, BashHighlighter),
        ('krk', 1000, KrkHighlighter),
    ]
    def nest(name, state, highlighter):
        self.set_state(0 if self.state < 1 else self.state - state)
        let sub = highlighter(self)
        while True:
            sub.set_state(sub.calculate())
            if sub.state != 0: break
        if not sub.state or sub.state == -1: return state
        return sub.state + state
    def calculate():
        if self.state < 1:
            if self.i == 0 and self[0] == '#':
                while self[0] == '#': self.paint(1, self.FLAG_KEYWORD)
                self.paint(-1, self.FLAG_BOLD)
                return None
            else if self.i == 0:
                while self[0] == ' ': self.skip()
                if self[0] == '`' and self[1] == '`' and self[2] == '`':
                    self.paint(3, self.FLAG_STRING)
                    for k,s,h in self.nestables:
                        if self.matchPrefix(k):
                            self.paint(len(k), self.FLAG_NUMERAL)
                            return s
                    return 1
            if self[0] == '`':
                self.paint(1, self.FLAG_STRING)
                while self[0]:
                    if self[0] == '`':
                        self.paint(1, self.FLAG_STRING)
                        return 0
                    self.paint(1, self.FLAG_STRING)
                return 0
            else if self[0] == '[':
                self.skip()
                while self[0] and self[0] != ']':
                    self.paint(1, self.FLAG_LINK)
                if self[0] == ']':
                    self.skip()
                if self[0] == '(':
                    self.skip()
                    while self[0] and self[0] != ')':
                        self.paint(1, self.FLAG_NUMERAL)
                return 0
            else if self[0]:
                self.skip()
                return 0
            return None
        else if self.state >= 1:
            if self.i == 0:
                for j=0;self[j];j++:
                    if self[j] == '`' and self[j+1] == '`' and self[j+2] == '`':
                        self.paint(j, self.FLAG_NONE)
                        self.paint(3, self.FLAG_STRING)
                        return None
            if self.state == 1:
                self.paint(-1, self.FLAG_STRING)
                return 1
            else:
                for k,state,highlighter in self.nestables:
                    if self.state < state + 99:
                        return self.nest(k, state, highlighter)
        return None

bind(MarkdownHighlighter)
