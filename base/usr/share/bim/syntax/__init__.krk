from bim import SyntaxState, bindHighlighter

def bind(cls):
    bindHighlighter(cls)
    return cls

class Highlighter(SyntaxState):

    def matchPrefix(prefix):
        let i = 0
        while True:
            if i == len(prefix): return True
            if prefix[i] != self[i]: return False
            if not self[i]: return False
            i++

    def paintSingleString():
        self.paint(1, self.FLAG_STRING)
        while self[0]:
            if self[0] == '\\' and self[1] == "'":
                self.paint(2, self.FLAG_ESCAPE)
            else if self[0] == "'":
                self.paint(1, self.FLAG_STRING)
                return
            else if self[0] == '\\':
                self.paint(2, self.FLAG_ESCAPE)
            else:
                self.paint(1, self.FLAG_STRING)

    def paintSimpleString():
        self.paint(1, self.FLAG_STRING)
        while self[0]:
            if self[0] == '\\' and self[1] == '"':
                self.paint(2, self.FLAG_ESCAPE)
            else if self[0] == '"':
                self.paint(1, self.FLAG_STRING)
                return
            else if self[0] == '\\':
                self.paint(2, self.FLAG_ESCAPE)
            else:
                self.paint(1, self.FLAG_STRING)

    @staticmethod
    def isalpha(c):
        c = c if isinstance(c,int) else ord(c) if c else -1
        return (c >= ord('a') and c <= ord('z')) or (c >= ord('A') and c <= ord('Z'))

    @staticmethod
    def isalnum(c):
        c = c if isinstance(c,int) else ord(c) if c else -1
        return (c >= ord('a') and c <= ord('z')) or (c >= ord('A') and c <= ord('Z')) or (c >= ord('0') and c <= ord('9'))
