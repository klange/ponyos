from syntax import Highlighter, bind
from syntax.css import CSSHighlighter

class XMLHighlighter(Highlighter):
    name = 'xml'
    extensions = ('.xml','.iml')
    def paintXmlComment():
        while self[0]:
            if self[0] == '-' and self[1] == '-' and self[2] == '>':
                self.paint(3, self.FLAG_COMMENT)
                return 0
            else:
                if self.commentBuzzwords(): continue
                self.paint(1, self.FLAG_COMMENT)
        return 4
    def paintTagString():
        if self[0] == '"':
            self.paint(1, self.FLAG_STRING)
            return 2
        else:
            self.paintSimpleString()
            if not self[0] and self[-1] != '"':
                return 3
        return None
    def paintInsideTag():
        while self[0]:
            if self[0] == '>':
                self.paint(1, self.FLAG_TYPE)
                return 0
            else if self[0] == '"':
                self.paintSimpleString()
                if not self[0] and self[-1] != '"':
                    return 3
            else:
                self.paint(1, self.FLAG_TYPE)
        return 2
    def paintTag():
        while self[0]:
            if self[0] == '/': self.paint(1, self.FLAG_TYPE)
            if self[0] == '?': self.paint(1, self.FLAG_TYPE)
            if self[0] == ' ' or self[0] == '\t': self.skip()
            if self.isalnum(self[0]):
                while self.isalnum(self[0]) or self[0] == '-':
                    self.paint(1, self.FLAG_KEYWORD)
                if not self[0]: return 2
                return self.paintInsideTag()
            else:
                self.paint(1, self.FLAG_TYPE)
        return None
    def calculate():
        if self.state < 1:
            while self[0] and self[0] != '<':
                self.skip()
            if not self[0]: return None
            if self[0] == '<' and self[1] == '!' and self[2] == '-' and self[3] == '-':
                self.paint(4, self.FLAG_COMMENT)
                return self.paintXmlComment()
            self.paint(1, self.FLAG_TYPE)
            return self.paintTag()
        else if self.state == 1:
            return self.paintTag()
        else if self.state == 2:
            return self.paintInsideTag()
        else if self.state == 3:
            return self.paintTagString()
        else if self.state == 4:
            return self.paintXmlComment()
        return None


bind(XMLHighlighter)

'''
General proof of concept for an HTML highlighter that does nested CSS.
Could be extended to do nested JS, probably.
Doesn't actually do either right now, but demonstrates how it could be done.
'''
class HTMLHighlighter(XMLHighlighter):
    name = 'html'
    extensions = ('.html','.htm')
    def paintTag():
        if self.matchAndPaint('style', self.FLAG_KEYWORD, self.cKeywordQualifier):
            return self.paintInsideStyleTag()
        return super().paintTag()
    def paintInsideStyleTag():
        let r = self.paintInsideTag()
        if r == 2:
            return 5
        else:
            return self.paintCss()
    def paintCss():
        # TODO actually paint CSS
        while self[0] and not (self[0] == '<' and self[1] == '/' and self[2] == 's'):
            self.set_state(0)
            let css = CSSHighlighter(self)
            let result = css.calculate()
            if result == 0:
                self.__init__(css)
                continue
            else if result == None:
                return 6
        if (self[0] == '<' and self[1] == '/' and self[2] == 's'):
            return self.paintTag()
        return 6
    def calculate():
        if self.state < 5:
            return super().calculate()
        else if self.state == 5:
            return self.paintInsideStyleTag()
        else if self.state == 6:
            return self.paintCss()
        else if self.state == 7:
            self.set_state(1)
            let css = CSSHighlighter(self)
            if css.calculate() == 1: return 7
            self.__init__(css)
            return 6

bind(HTMLHighlighter)

