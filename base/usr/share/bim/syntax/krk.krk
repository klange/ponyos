from bim import getCommands
from syntax import Highlighter, bind
from syntax.doxygen import tryDoxygenComment

class KrkHighlighter(Highlighter):
    name = 'krk'
    extensions = ('.krk',)
    spaces = True

    doxygenDocstrings = False
    enableChecking = False
    checkKrkCode = None

    keywords = [
        'and','class','def','else','export','for','if','in','import','let','not',
        'or','return','while','try','except','raise','continue','break','as','from',
        'elif', 'lambda', 'pass', 'with', 'is', 'del', 'assert', 'yield', 'finally',
    ]

    types = [
        'self','super','len','str','int','float','dir','repr','list','dict','range',
        'object','exception','isinstance','type','print','tuple','bool','any','all',
        'hex','ord','chr','bytes','set','getattr','setattr','input','zip','enumerate',
        'property','staticmethod','classmethod','filter','min','max','id','map','bin',
        'sum','sorted','issubclass','hasattr','delattr',
    ]

    special = [
        'True', 'False', 'None'
    ]

    exceptions = [
        'Exception', 'TypeError', 'ArgumentError', 'IndexError', 'KeyError',
        'AttributeError', 'NameError', 'ImportError', 'IOError', 'ValueError',
        'KeyboardInterrupt', 'ZeroDivisionError', 'NotImplementedError', 'SyntaxError',
        'AssertionError',
    ]

    def paintString(self, strType, isTriple, isFormat=False):
        while self[0] != None:
            if self[0] == '\\' and self[1] == strType:
                self.paint(2, self.FLAG_ESCAPE)
            else if self[0] == strType:
                self.paint(1, self.FLAG_STRING)
                if isTriple:
                    if self[0] == strType and self[1] == strType:
                        self.paint(2, self.FLAG_STRING)
                        return 0
                else:
                    return 0
            else if self[0] == '\\':
                if self[1] == 'x':
                    self.paint(4, self.FLAG_ESCAPE)
                else if self[1] == 'u':
                    self.paint(6, self.FLAG_ESCAPE)
                else if self[1] == 'U':
                    self.paint(10, self.FLAG_ESCAPE)
                else if self[1] == None and not isTriple:
                    self.paint(1, self.FLAG_ESCAPE)
                    return 3 if strType == '"' else (14 if isFormat else 4)
                else if self[1] in '\\\'"abfnrtv[':
                    self.paint(2, self.FLAG_ESCAPE)
                else:
                    self.paint(1, self.FLAG_STRING)
            else if isFormat and self[0] == '{':
                if self[1] == '}':
                    self.paint(-1, self.FLAG_ERROR)
                    return None
                self.paint(1, self.FLAG_ESCAPE)
                let x = 0
                while self[0]:
                    if self[0] == '{':
                        x++
                    else if self[0] == '}':
                        if x == 0:
                            self.paint(1, self.FLAG_ESCAPE)
                            break
                        x--
                    else if self[0] == strType and not isTriple:
                        self.paint(-1, self.FLAG_ERROR)
                        return None
                    else if self.findKeywords(self.keywords, self.FLAG_ESCAPE, self.cKeywordQualifier):
                        continue
                    else if self[-1] != '.' and self.findKeywords(self.types, self.FLAG_TYPE, self.cKeywordQualifier):
                        continue
                    else if self.findKeywords(self.exceptions, self.FLAG_PRAGMA, self.cKeywordQualifier):
                        continue
                    self.paint(1, self.FLAG_NUMERAL)
            else if self.doxygenDocstrings and isTriple and tryDoxygenComment(self, self.FLAG_STRING):
                continue
            else:
                self.paint(1, self.FLAG_STRING)
        if isTriple: return int(strType == "'") + (11 if isFormat else 1)
        return 0

    def paintNumeral(self):
        if self[0] == '0' and (self[1] == 'x' or self[1] == 'X'):
            self.paint(2, self.FLAG_NUMERAL)
            while self.isxdigit(self[0]):
                self.paint(1, self.FLAG_NUMERAL)
        else if self[0] == '0' and (self[1] == 'o' or self[1] == 'O'):
            self.paint(2, self.FLAG_NUMERAL)
            while self[0] in '01234567':
                self.paint(1, self.FLAG_NUMERAL)
        else if self[0] == '0' and (self[1] == 'b' or self[1] == 'B'):
            self.paint(2, self.FLAG_NUMERAL)
            while self[0] == '0' or self[0] == '1':
                self.paint(1, self.FLAG_NUMERAL)
        else:
            while self.isdigit(self[0]):
                self.paint(1, self.FLAG_NUMERAL)
            if self[0] == '.' and self.isdigit(self[1]):
                self.paint(1, self.FLAG_NUMERAL)
                while self.isdigit(self[0]):
                    self.paint(1, self.FLAG_NUMERAL)
        return 0

    def paintDoxyComment(self):
        while self[0] is not None:
            if tryDoxygenComment(self): continue
            else if self.commentBuzzwords(): continue
            else: self.paint(1, self.FLAG_COMMENT)

    def calculate(self):
        if self.enableChecking and self.i == 0: self.checkKrkCode()
        if self.state <= 0:
            if self[0] == '#':
                self.paintDoxyComment()
            else if self[0] == '@':
                self.paint(1, self.FLAG_TYPE)
                while self.cKeywordQualifier(self[0]):
                    self.paint(1, self.FLAG_TYPE)
                return 0
            else if self[0] == '"' or self[0] == "'":
                let strType = self[0]
                if self[-1] == 'f':
                    self.rewind(1)
                    self.paint(1, self.FLAG_KEYWORD)
                if self[1] == strType and self[2] == strType:
                    self.paint(3, self.FLAG_STRING)
                    return self.paintString(strType,True,self[-4]=='f')
                self.paint(1, self.FLAG_STRING)
                return self.paintString(strType,False,self[-2]=='f')
            else if self.findKeywords(self.keywords, self.FLAG_KEYWORD, self.cKeywordQualifier):
                return 0
            else if self[-1] != '.' and self.findKeywords(self.types, self.FLAG_TYPE, self.cKeywordQualifier):
                return 0
            else if self.findKeywords(self.special, self.FLAG_NUMERAL, self.cKeywordQualifier):
                return 0
            else if self.findKeywords(self.exceptions, self.FLAG_PRAGMA, self.cKeywordQualifier):
                return 0
            else if not self.cKeywordQualifier(self[-1]) and self.isdigit(self[0]):
                self.paintNumeral()
                return 0
            else if self[0] != None:
                self.skip()
                return 0
        else if self.state >= 1:
            return self.paintString("'\""[self.state % 2], (self.state % 10) <= 2, self.state > 10)
        return None

bind(KrkHighlighter)

class BimcmdHighlighter(KrkHighlighter):
    name = 'bimcmd'
    extensions = ('.bim3rc',)

    def calculate(self):
        if self.state <= 0 and self[-1] != '.':
            if self.findKeywords(getCommands(), self.FLAG_KEYWORD, self.cKeywordQualifier):
                return 0
        return super().calculate()

bind(BimcmdHighlighter)
