from syntax import Highlighter, bind

class GnumakeHighlighter(Highlighter):
    name = 'make'
    extensions = ('Makefile','makefile','GNUmakefile','.mak')
    commands = [
        "define","endef","undefine","ifdef","ifndef","ifeq","ifneq","else","endif",
        "include","sinclude","override","export","unexport","private","vpath",
        "-include",
    ]
    functions = [
        "subst","patsubst","findstring","filter","filter-out",
        "sort","word","words","wordlist","firstword","lastword",
        "dir","notdir","suffix","basename","addsuffix","addprefix",
        "join","wildcard","realpath","abspath","error","warning",
        "shell","origin","flavor","foreach","if","or","and",
        "call","eval","file","value",
    ]
    targets = [
        "all", # Not really special, but highlight it 'cause I feel like it.
        ".PHONY", ".SUFFIXES", ".DEFAULT", ".PRECIOUS", ".INTERMEDIATE",
        ".SECONDARY", ".SECONDEXPANSION", ".DELETE_ON_ERROR", ".IGNORE",
        ".LOW_RESOLUTION_TIME", ".SILENT", ".EXPORT_ALL_VARIABLES",
        ".NOTPARALLEL", ".ONESHELL", ".POSIX",
    ]
    def commandQualifier(c):
        if isinstance(c,int): c = chr(c) if c > 0 else '\x00'
        return self.isalnum(c) or c in '_-.'
    def makeCloseParen():
        self.paint(2, self.FLAG_TYPE)
        self.findKeywords(self.functions, self.FLAG_KEYWORD, self.cKeywordQualifier)
        let i = 1
        while self[0]:
            if self[0] == '(':
                i++
                if self[-1] == '$':
                    self.paint(1, self.FLAG_TYPE)
                    self.findKeywords(self.functions, self.FLAG_KEYWORD, self.cKeywordQualifier)
                    continue
            else if self[0] == ')':
                i--
                if i == 0:
                    self.paint(1, self.FLAG_TYPE)
                    return 0
            else if self[0] == '"':
                self.paintSimpleString()
            self.paint(1, self.FLAG_TYPE)
        return 0
    def makeCloseBrace():
        self.paint(2, self.FLAG_TYPE)
        while self[0]:
            if self[0] == '}':
                self.paint(1, self.FLAG_TYPE)
                return 0
            self.paint(1, self.FLAG_TYPE)
        return 0
    def makeVar():
        if self[1] == '(':
            self.makeCloseParen()
        else if self[1] == '{':
            self.makeCloseBrace()
        else:
            self.paint(2, self.FLAG_TYPE)
    def paintString():
        let strType = self[0]
        self.paint(1, self.FLAG_STRING)
        while self[0]:
            if self[0] == strType and self[-1] != '\\':
                self.paint(1, self.FLAG_STRING)
                return
            else if self[0] == '\\' and (self[1] == strType or strType == '"'):
                self.paint(2, self.FLAG_ESCAPE)
            else if self[0] == '$':
                self.makeVar()
            else:
                self.paint(1, self.FLAG_STRING)
    def variableOrComment(flag):
        while self[0]:
            if self[0] == '$':
                self.makeVar()
            else if self[0] == '#':
                self.paintComment()
            else if self[0] == "'":
                self.paintString()
            else if self[0] == '"':
                self.paintString()
            else:
                self.paint(1, flag)
        return 0
    def calculate():
        if self.i == 0 and self[0] == '\t':
            self.skip()
            if self[0] == '@':
                self.paint(1, self.FLAG_KEYWORD)
            self.variableOrComment(self.FLAG_NUMERAL)
        else:
            while self[0] == ' ': self.skip()
            let whatisit
            for i = 0; self[i]; i++:
                if self[i] == ':' and self[i+1] != '=':
                    whatisit = 1
                    break
                else if self[i] == '=':
                    whatisit = 2
                    break
                else if self[i] == '#':
                    break
            if not whatisit:
                while self[0]:
                    if self[0] == '#':
                        self.paintComment()
                    else if self.findKeywords(self.commands, self.FLAG_KEYWORD, self.commandQualifier):
                        continue
                    else if self[0] == '$':
                        self.variableOrComment(self.FLAG_NONE)
                    else:
                        self.skip()
            else if whatisit == 1: # rule
                while self[0]:
                    if self[0] == '#':
                        self.paintComment()
                    else if self[0] == ':':
                        self.paint(1, self.FLAG_TYPE)
                        self.variableOrComment(self.FLAG_NONE)
                    else if self.findKeywords(self.targets, self.FLAG_KEYWORD, self.commandQualifier):
                        continue
                    else:
                        self.paint(1, self.FLAG_TYPE)
            else if whatisit == 2: # variable
                self.matchAndPaint('export', self.FLAG_KEYWORD, self.cKeywordQualifier)
                while self[0] and self[0] not in '+=:?':
                    self.paint(1, self.FLAG_TYPE)
                while self[0] and self[0] != '=':
                    self.skip()
                self.variableOrComment(self.FLAG_NONE)
        return None

bind(GnumakeHighlighter)
