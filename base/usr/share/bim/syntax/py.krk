from syntax import Highlighter, bind

class PythonHighlighter(Highlighter):
    name = 'python'
    extensions = ('.py',)
    spaces = True
    keywords = [
        "class","def","return","del","if","else","elif","for","while","continue",
        "break","assert","as","and","or","except","finally","from","global",
        "import","in","is","lambda","with","nonlocal","not","pass","raise","try","yield",
        "async","await",
    ]
    types = [
        "abs","all","any","ascii","bin","bool","breakpoint","bytes",
        "bytearray","callable","compile","complex","delattr","chr",
        "dict","dir","divmod","enumerate","eval","exec","filter","float",
        "format","frozenset","getattr","globals","hasattr","hash","help",
        "hex","id","input","int","isinstance","issubclass","iter","len",
        "list","locals","map","max","memoryview","min","next","object",
        "oct","open","ord","pow","print","property","range","repr","reverse",
        "round","set","setattr","slice","sorted","staticmethod","str","sum",
        "super","tuple","type","vars","zip",
        'self',
    ]
    special = ['True','False','None']
    def paintPyTriple(quote):
        while self[0]:
            if self[0] == quote:
                self.paint(1, self.FLAG_STRING)
                if self[0] == quote and self[1] == quote:
                    self.paint(2, self.FLAG_STRING)
                    return 0
            else:
                self.paint(1, self.FLAG_STRING)
        return 1 if quote == '"' else 2
    def paintPyString(quote):
        self.paint(1, self.FLAG_STRING)
        while self[0]:
            if self[0] == '\\' and self[1] == quote:
                self.paint(2, self.FLAG_ESCAPE)
            else if self[0] == quote:
                self.paint(1, self.FLAG_STRING)
                return 0
            else if self[0] == '\\':
                self.paint(2, self.FLAG_ESCAPE)
            else:
                self.paint(1, self.FLAG_STRING)
        return 0
    def paintPyNumeral():
        if self[0] == '0' and self[1] == 'x' or self[1] == 'X':
            self.paint(2, self.FLAG_NUMERAL)
            while self.isxdigit(self[0]) or self[0] == '_':
                self.paint(1, self.FLAG_NUMERAL)
        else if self[0] == '0' and self[1] == '.':
            self.paint(2, self.FLAG_NUMERAL)
            while self.isdigit(self[0]) or self[0] == '_':
                self.paint(1, self.FLAG_NUMERAL)
            if (self[0] == '+' or self[0] == '-') and (self[1] == 'e' or self[1] == 'E'):
                self.paint(2, self.FLAG_NUMERAL)
                while self.isdigit(self[0]) or self[0] == '_':
                    self.paint(1, self.FLAG_NUMERAL)
            else if self[0] == 'e' or self[0] == 'E':
                self.paint(1, self.FLAG_NUMERAL)
                while self.isdigit(self[0]) or self[0] == '_':
                    self.paint(1, self.FLAG_NUMERAL)
            if self[0] == 'j': self.paint(1, self.FLAG_NUMERAL)
            return 0
        else:
            while self.isdigit(self[0]) or self[0] == '_': self.paint(1, self.FLAG_NUMERAL)
            if self[0] == '.':
                self.paint(1, self.FLAG_NUMERAL)
                while self.isdigit(self[0]) or self[0] == '_': self.paint(1, self.FLAG_NUMERAL)
                if (self[0] == '+' or self[0] == '-') and (self[1] == 'e' or self[1] == 'E'):
                    self.paint(2, self.FLAG_NUMERAL)
                    while self.isdigit(self[0]) or self[0] == '_':
                        self.paint(1, self.FLAG_NUMERAL)
                else if self[0] == 'e' or self[0] == 'E':
                    self.paint(1, self.FLAG_NUMERAL)
                    while self.isdigit(self[0]) or self[0] == '_':
                        self.paint(1, self.FLAG_NUMERAL)
                if self[0] == 'j': self.paint(1, self.FLAG_NUMERAL)
                return 0
        while self[0] == 'l' or self[0] == 'L': self.paint(1, self.FLAG_NUMERAL)
        return 0
    def paintPyFString(quote):
        self.paint(1, self.FLAG_STRING)
        while self[0]:
            if self[0] == '\\' and self[1] == quote:
                self.paint(2, self.FLAG_ESCAPE)
            else if self[0] == quote:
                self.paint(1, self.FLAG_STRING)
                return
            else if self[0] == '\\':
                self.paint(2, self.FLAG_ESCAPE)
            else if self[0] == '{':
                self.paint(1, self.FLAG_NUMERAL)
                if self[0] == '}':
                    self.rewind(1)
                    self.paint(2, self.FLAG_ERROR)
                else:
                    while self[0] and self[0] != '}':
                        self.paint(1, self.FLAG_NUMERAL)
                    self.paint(1, self.FLAG_NUMERAL)
            else:
                self.paint(1, self.FLAG_STRING)
    def calculate():
        if self.state < 1:
            if self[0] == '#':
                self.paintComment()
            else if self.i == 0 and self.matchAndPaint('import', self.FLAG_PRAGMA, self.cKeywordQualifier):
                return 0
            else if self[0] == '@':
                self.paint(1, self.FLAG_PRAGMA)
                while self.cKeywordQualifier(self[0]): self.paint(1, self.FLAG_PRAGMA)
                return 0
            else if self[0] == '"':
                if self[1] == '"' and self[2] == '"':
                    self.paint(3, self.FLAG_STRING)
                    return self.paintPyTriple('"')
                else if self[-1] == 'f':
                    self.rewind(1)
                    self.paint(1, self.FLAG_TYPE)
                    self.paintPyFString('"')
                    return 0
                else:
                    self.paintPyString('"')
                    return 0
            else if self[0] == "'":
                if self[1] == "'" and self[2] == "'":
                    self.paint(3, self.FLAG_STRING)
                    return self.paintPyTriple("'")
                else if self[-1] == 'f':
                    self.rewind(1)
                    self.paint(1, self.FLAG_TYPE)
                    self.paintPyFString("'")
                    return 0
                else:
                    self.paintPyString("'")
                    return 0
            else if self.findKeywords(self.keywords, self.FLAG_KEYWORD, self.cKeywordQualifier):
                return 0
            else if self.findKeywords(self.types, self.FLAG_TYPE, self.cKeywordQualifier):
                return 0
            else if self.findKeywords(self.special, self.FLAG_NUMERAL, self.cKeywordQualifier):
                return 0
            else if not self.cKeywordQualifier(self[-1]) and self.isdigit(self[0]):
                self.paintPyNumeral()
                return 0
            else if self[0]:
                self.skip()
                return 0
        else if self.state == 1:
            return self.paintPyTriple('"')
        else if self.state == 2:
            return self.paintPyTriple("'")
        return None

bind(PythonHighlighter)
