from syntax import Highlighter, bind

class BashHighlighter(Highlighter):
    name = "bash"
    extensions = ('.sh','.bash','.bashrc')

    keywords = [
        'if','then','else','elif','fi','case','esac','for','coproc',
        'select','while','until','do','done','in','function','time',
        'exit','return','source','export','alias','complete','shopt',
        'local','eval','echo','cd','pushd','popd','printf','sed',
        'rm','mv'
    ]

    def popState(self, state):
        let newState = state / 100
        return newState * 10

    def pushState(self, state, newState):
        return state * 10 + newState

    def paintTick(self, outState):
        let last = None
        while self[0] != None:
            if last != '\\' and self[0] == "'":
                self.paint(1, self.FLAG_STRING)
                return self.popState(outState)
            else if last == '\\':
                self.paint(1, self.FLAG_STRING)
                last = None
            else if self[0] != None:
                last = self[0]
                self.paint(1, self.FLAG_STRING)
        return outState

    def paintBracedVariable(self):
        while self[0] != None:
            if self[0] == '}':
                self.paint(1, self.FLAG_NUMERAL)
                return 0
            self.paint(1, self.FLAG_NUMERAL)
        return 0

    def specialVariable(self, c):
        return c == '@' or c == '?'

    def paintString(self, term, outState, color):
        let last = None
        while self[0] != None:
            if last != '\\' and self[0] == term:
                self.paint(1, color)
                return self.popState(outState)
            else if last == '\\':
                self.paint(1, color)
                last = None
            else if term != '`' and self[0] == '`':
                self.paint(1, self.FLAG_ESCAPE)
                outState = self.paintString('`', self.pushState(outState, 20), self.FLAG_ESCAPE)
            else if term != ')' and self[0] == '$' and self[1] == '(':
                self.paint(2, self.FLAG_TYPE)
                outState = self.paintString(')', self.pushState(outState, 30), self.FLAG_TYPE)
            else if self[0] == '$' and self[1] == '{':
                self.paint(2, self.FLAG_NUMERAL)
                self.paintBracedVariable()
            else if self[0] == '$':
                self.paint(1, self.FLAG_NUMERAL)
                if self.specialVariable(self[0]):
                    self.paint(1, self.FLAG_NUMERAL)
                    continue
                while self.cKeywordQualifier(self[0]): self.paint(1, self.FLAG_NUMERAL)
            else if term != '"' and self[0] == '"':
                self.paint(1, self.FLAG_STRING)
                outState = self.paintString('"', self.pushState(outState, 40), self.FLAG_STRING)
            else if term != '"' and self[0] == "'":
                self.paint(1, self.FLAG_STRING)
                outState = self.paintTick(outState)
            else if self[0] != -1:
                last = self[0]
                self.paint(1, color)
        return outState

    def calculate(self):
        if self.state < 1:
            if self[0] == '#' and self[-1] != '\\':
                while self[0] != None:
                    if self.commentBuzzwords(): continue
                    self.paint(1, self.FLAG_COMMENT)
                return None
            else if self[0] == "'" and self[-1] != '\\':
                self.paint(1, self.FLAG_STRING)
                return self.paintTick(10)
            else if self[0] == '`' and self[-1] != '\\':
                self.paint(1, self.FLAG_ESCAPE)
                return self.paintString('`', 20, self.FLAG_ESCAPE)
            else if self[0] == '$' and self[1] == '(' and self[-1] != '\\':
                self.paint(2, self.FLAG_TYPE)
                return self.paintString(')', 30, self.FLAG_TYPE)
            else if self[0] == '"' and self[-1] != '\\':
                self.paint(1, self.FLAG_STRING)
                return self.paintString('"', 40, self.FLAG_STRING)
            else if self[0] == '$' and self[1] == '{' and self[-1] != '\\':
                self.paint(2, self.FLAG_NUMERAL)
                self.paintBracedVariable()
                return 0
            else if self[0] == '$'and self[-1] != '\\':
                self.paint(1, self.FLAG_NUMERAL)
                if self.specialVariable(self[0]):
                    self.paint(1, self.FLAG_NUMERAL)
                    return 0
                while self.cKeywordQualifier(self[0]): self.paint(1, self.FLAG_NUMERAL)
                return 0
            else if self.findKeywords(self.keywords, self.FLAG_KEYWORD, self.cKeywordQualifier):
                return 0
            else if self[0] == ';':
                self.paint(1, self.FLAG_KEYWORD)
                return 0
            else if self.cKeywordQualifier(self[0]):
                for i = 0; self[i] != None; i++:
                    if self[i] == ' ': break
                    if self[i] == '=':
                        self.paint(i, self.FLAG_TYPE)
                        self.skip()
                        return 0
                for i = 0; self[i] != None; i++:
                    if self[i] == '(':
                        self.paint(i, self.FLAG_TYPE)
                        return 0
                    if not self.cKeywordQualifier(self[i]) and self[i] != '-' and self[i] != ' ':
                        break
                self.skip()
                return 0
            else if self[0] != None:
                self.skip()
                return 0
        else if self.state >= 10:
            let outState = self.state
            while self[0] != None:
                let s = (outState / 10) % 10
                if s == 1: outState = self.paintString("'", outState, self.FLAG_STRING)
                else if s == 2: outState = self.paintString('`', outState, self.FLAG_ESCAPE)
                else if s == 3: outState = self.paintString(')', outState, self.FLAG_TYPE)
                else if s == 4: outState = self.paintString('"', outState, self.FLAG_STRING)
                else if not s: return None
            return outState
        return None

bind(BashHighlighter)
