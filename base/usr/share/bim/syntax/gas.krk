from syntax import Highlighter, bind

@bind
class GasHighlighter(Highlighter):
    name = 'gas'
    extensions = ('.S',)
    spaces = True

    directives = ['.' + x for x in [
        'abort','align','balignw','balignl','bundle_align_mode','bundle_lock','bundle_unlock',
        'bss','cfi_startproc','cfi_sections','cfi_endproc','cfi_personality','cfi_lsda',
        'cfi_def_cfa','cfi_def_cfa_register','cfi_def_cfa_offset','cfi_adjust_cfa_offset',
        'cfi_offset','cfi_rel_offset','cfi_register','cfi_restore','cfi_undefined',
        'cfi_same_value','cfi_remember_state','cfi_return_column','cfi_signal_frame',
        'cfi_window_save','cfi_escape','cfi_val_encoded_addr','data','def','desc',
        'dim','eject','else','elseif','endef','endif','endr','qeu','equiv','eqv','err',
        'error','exitm','extern','fail','file','fill','global','globl','gnu_attribute',
        'hidden','ident','if','incbin','include','internal','irp','irpc','lcomm','lflags',
        'line','linkonce','list','ln','loc','loc_mark_labels','local','mri','nolist','org',
        'p2alignw','p2align1','popsection','previous','print','protected','psize','purgem',
        'pushsection','reloc','rept','sbttl','scl','section','set','single','size','skip',
        'sleb128','stabd','stabn','stabs','struct','subsection','symver','tag','text','title',
        'type','uleb128','val','version','vtable_entry','vtable_inherit','warning','weak',
        'weakref',
        'code16','code32','code64',
    ]]

    types = ['.' + x for x in [
        'byte','hword','word','int','long','double','short','float','quad','octa',
        'string','string8','string16','ascii','asciz','comm','space'
    ]]

    registers = ['%' + x for x in [
        'r8','r9','r10','r11','r12','r13','r14','r15',
        'rax','rbx','rcx','rdx','rdi','rsi','rsp','rbp',
        'eax','ebx','ecx','edx','ax','bx','cx','dx','ah','al','bh','bl','ch','cl','dh','dl',
        'edi','esi','esp','ebp','di','si','sp','bp','sph','spl','bph','bpl',
        'cs','ds','es','fs','gs','ss','ip','eip','rip','eflags',
        'cr0','cr1','cr2','cr3','cr4',
    ]]

    instructions = [
        'aaa',
        'aad','aadb','aadw','aadl','aadq',
        'aam','aamb','aamw','aaml','aamq',
        'aas',
        'adc','adcb','adcw','adcl','adcq',
        'add','addb','addw','addl','addq',
        'and','andb','andw','andl','andq',
        'arpl',
        'bb0_reset',
        'bb1_reset',
        'bound','boundb','boundw','boundl','boundq',
        'bsf',
        'bsr',
        'bswap',
        'bt','btb','btw','btl','btq',
        'btc','btcb','btcw','btcl','btcq',
        'btr','btrb','btrw','btrl','btrq',
        'bts','btsb','btsw','btsl','btsq',
        'call','callb','callw','calll','callq',
        'cbw',
        'cdq',
        'cdqe',
        'clc',
        'cld',
        'clgi',
        'cli',
        'clts',
        'cmc',
        'cmp','cmpb','cmpw','cmpl','cmpq',
        'cmpsb',
        'cmpsd',
        'cmpsq',
        'cmpsw',
        'cmpxchg',
        'cmpxchg486',
        'cmpxchg8b','cmpxchg8bb','cmpxchg8bw','cmpxchg8bl','cmpxchg8bq',
        'cmpxchg16b','cmpxchg16bb','cmpxchg16bw','cmpxchg16bl','cmpxchg16bq',
        'cpuid',
        'cpu_read',
        'cpu_write',
        'cqo',
        'cwd',
        'cwde',
        'daa',
        'das',
        'dec',
        'div',
        'dmint',
        'emms',
        'enter','enterb','enterw','enterl','enterq',
        'equ',
        'f2xm1',
        'fabs',
        'fadd',
        'faddp',
        'fbld','fbldb','fbldw','fbldl','fbldq',
        'fbstp','fbstpb','fbstpw','fbstpl','fbstpq',
        'fchs',
        'fclex',
        'fcmovb',
        'fcmovbe',
        'fcmove',
        'fcmovnb',
        'fcmovnbe',
        'fcmovne',
        'fcmovnu',
        'fcmovu',
        'fcom',
        'fcomi',
        'fcomip',
        'fcomp',
        'fcompp',
        'fcos',
        'fdecstp',
        'fdisi',
        'fdiv',
        'fdivp',
        'fdivr',
        'fdivrp',
        'femms',
        'feni',
        'ffree',
        'ffreep',
        'fiadd','fiaddb','fiaddw','fiaddl','fiaddq',
        'ficom','ficomb','ficomw','ficoml','ficomq',
        'ficomp','ficompb','ficompw','ficompl','ficompq',
        'fidiv','fidivb','fidivw','fidivl','fidivq',
        'fidivr','fidivrb','fidivrw','fidivrl','fidivrq',
        'fild','fildb','fildw','fildl','fildq',
        'fimul','fimulb','fimulw','fimull','fimulq',
        'fincstp',
        'finit',
        'fist','fistb','fistw','fistl','fistq',
        'fistp','fistpb','fistpw','fistpl','fistpq',
        'fisttp','fisttpb','fisttpw','fisttpl','fisttpq',
        'fisub','fisubb','fisubw','fisubl','fisubq',
        'fisubr','fisubrb','fisubrw','fisubrl','fisubrq',
        'fld',
        'fld1',
        'fldcw','fldcwb','fldcww','fldcwl','fldcwq',
        'fldenv','fldenvb','fldenvw','fldenvl','fldenvq',
        'fldl2e',
        'fldl2t',
        'fldlg2',
        'fldln2',
        'fldpi',
        'fldz',
        'fmul',
        'fmulp',
        'fnclex',
        'fndisi',
        'fneni',
        'fninit',
        'fnop',
        'fnsave','fnsaveb','fnsavew','fnsavel','fnsaveq',
        'fnstcw','fnstcwb','fnstcww','fnstcwl','fnstcwq',
        'fnstenv','fnstenvb','fnstenvw','fnstenvl','fnstenvq',
        'fnstsw',
        'fpatan',
        'fprem',
        'fprem1',
        'fptan',
        'frndint',
        'frstor','frstorb','frstorw','frstorl','frstorq',
        'fsave','fsaveb','fsavew','fsavel','fsaveq',
        'fscale',
        'fsetpm',
        'fsin',
        'fsincos',
        'fsqrt',
        'fst',
        'fstcw','fstcwb','fstcww','fstcwl','fstcwq',
        'fstenv','fstenvb','fstenvw','fstenvl','fstenvq',
        'fstp',
        'fstsw',
        'fsub',
        'fsubp',
        'fsubr',
        'fsubrp',
        'ftst',
        'fucom',
        'fucomi',
        'fucomip',
        'fucomp',
        'fucompp',
        'fxam',
        'fxch',
        'fxtract',
        'fyl2x',
        'fyl2xp1',
        'hlt',
        'ibts',
        'icebp',
        'idiv',
        'imul','imulb','imulw','imull','imulq',
        'in',
        'inc','incb','incw','incl','incq',
        'incbin',
        'insb',
        'insd',
        'insw',
        'int','intb','intw','intl','intq',
        'int01',
        'int1',
        'int03',
        'int3',
        'into',
        'invd',
        'invlpg','invlpgb','invlpgw','invlpgl','invlpgq',
        'invlpga',
        'iret',
        'iretd',
        'iretq',
        'iretw',
        'jcxz','jcxzb','jcxzw','jcxzl','jcxzq',
        'jecxz','jecxzb','jecxzw','jecxzl','jecxzq',
        'jrcxz','jrcxzb','jrcxzw','jrcxzl','jrcxzq',
        'jmp','jmpb','jmpw','jmpl','jmpq',
        'jmpe',
        'lahf',
        'lar',
        'lds','ldsb','ldsw','ldsl','ldsq',
        'lea','leab','leaw','leal','leaq',
        'leave',
        'les','lesb','lesw','lesl','lesq',
        'lfence',
        'lfs','lfsb','lfsw','lfsl','lfsq',
        'lgdt','lgdtb','lgdtw','lgdtl','lgdtq',
        'lgs','lgsb','lgsw','lgsl','lgsq',
        'lidt','lidtb','lidtw','lidtl','lidtq',
        'lldt',
        'lmsw',
        'loadall',
        'loadall286',
        'lodsb',
        'lodsd',
        'lodsq',
        'lodsw',
        'loop','loopb','loopw','loopl','loopq',
        'loope','loopeb','loopew','loopel','loopeq',
        'loopne','loopneb','loopnew','loopnel','loopneq',
        'loopnz','loopnzb','loopnzw','loopnzl','loopnzq',
        'loopz','loopzb','loopzw','loopzl','loopzq',
        'lsl',
        'lss','lssb','lssw','lssl','lssq',
        'ltr',
        'mfence',
        'monitor',
        'mov','movb','movw','movl','movq',
        'movd',
        'movq',
        'movsb',
        'movsd',
        'movsq',
        'movsw',
        'movsx',
        'movsxd',
        'movsx',
        'movzx',
        'movzbl',
        'mul',
        'mwait',
        'neg',
        'nop',
        'not',
        'or','orb','orw','orl','orq',
        'out',
        'outsb',
        'outsd',
        'outsw',
        'packssdw','packssdwb','packssdww','packssdwl','packssdwq',
        'packsswb','packsswbb','packsswbw','packsswbl','packsswbq',
        'packuswb','packuswbb','packuswbw','packuswbl','packuswbq',
        'paddb','paddbb','paddbw','paddbl','paddbq',
        'paddd','padddb','padddw','padddl','padddq',
        'paddsb','paddsbb','paddsbw','paddsbl','paddsbq',
        'paddsiw','paddsiwb','paddsiww','paddsiwl','paddsiwq',
        'paddsw','paddswb','paddsww','paddswl','paddswq',
        'paddusb','paddusbb','paddusbw','paddusbl','paddusbq',
        'paddusw','padduswb','paddusww','padduswl','padduswq',
        'paddw','paddwb','paddww','paddwl','paddwq',
        'pand','pandb','pandw','pandl','pandq',
        'pandn','pandnb','pandnw','pandnl','pandnq',
        'pause',
        'paveb','pavebb','pavebw','pavebl','pavebq',
        'pavgusb','pavgusbb','pavgusbw','pavgusbl','pavgusbq',
        'pcmpeqb','pcmpeqbb','pcmpeqbw','pcmpeqbl','pcmpeqbq',
        'pcmpeqd','pcmpeqdb','pcmpeqdw','pcmpeqdl','pcmpeqdq',
        'pcmpeqw','pcmpeqwb','pcmpeqww','pcmpeqwl','pcmpeqwq',
        'pcmpgtb','pcmpgtbb','pcmpgtbw','pcmpgtbl','pcmpgtbq',
        'pcmpgtd','pcmpgtdb','pcmpgtdw','pcmpgtdl','pcmpgtdq',
        'pcmpgtw','pcmpgtwb','pcmpgtww','pcmpgtwl','pcmpgtwq',
        'pdistib','pdistibb','pdistibw','pdistibl','pdistibq',
        'pf2id','pf2idb','pf2idw','pf2idl','pf2idq',
        'pfacc','pfaccb','pfaccw','pfaccl','pfaccq',
        'pfadd','pfaddb','pfaddw','pfaddl','pfaddq',
        'pfcmpeq','pfcmpeqb','pfcmpeqw','pfcmpeql','pfcmpeqq',
        'pfcmpge','pfcmpgeb','pfcmpgew','pfcmpgel','pfcmpgeq',
        'pfcmpgt','pfcmpgtb','pfcmpgtw','pfcmpgtl','pfcmpgtq',
        'pfmax','pfmaxb','pfmaxw','pfmaxl','pfmaxq',
        'pfmin','pfminb','pfminw','pfminl','pfminq',
        'pfmul','pfmulb','pfmulw','pfmull','pfmulq',
        'pfrcp','pfrcpb','pfrcpw','pfrcpl','pfrcpq',
        'pfrcpit1','pfrcpit1b','pfrcpit1w','pfrcpit1l','pfrcpit1q',
        'pfrcpit2','pfrcpit2b','pfrcpit2w','pfrcpit2l','pfrcpit2q',
        'pfrsqit1','pfrsqit1b','pfrsqit1w','pfrsqit1l','pfrsqit1q',
        'pfrsqrt','pfrsqrtb','pfrsqrtw','pfrsqrtl','pfrsqrtq',
        'pfsub','pfsubb','pfsubw','pfsubl','pfsubq',
        'pfsubr','pfsubrb','pfsubrw','pfsubrl','pfsubrq',
        'pi2fd','pi2fdb','pi2fdw','pi2fdl','pi2fdq',
        'pmachriw','pmachriwb','pmachriww','pmachriwl','pmachriwq',
        'pmaddwd','pmaddwdb','pmaddwdw','pmaddwdl','pmaddwdq',
        'pmagw','pmagwb','pmagww','pmagwl','pmagwq',
        'pmulhriw','pmulhriwb','pmulhriww','pmulhriwl','pmulhriwq',
        'pmulhrwa','pmulhrwab','pmulhrwaw','pmulhrwal','pmulhrwaq',
        'pmulhrwc','pmulhrwcb','pmulhrwcw','pmulhrwcl','pmulhrwcq',
        'pmulhw','pmulhwb','pmulhww','pmulhwl','pmulhwq',
        'pmullw','pmullwb','pmullww','pmullwl','pmullwq',
        'pmvgezb','pmvgezbb','pmvgezbw','pmvgezbl','pmvgezbq',
        'pmvlzb','pmvlzbb','pmvlzbw','pmvlzbl','pmvlzbq',
        'pmvnzb','pmvnzbb','pmvnzbw','pmvnzbl','pmvnzbq',
        'pmvzb','pmvzbb','pmvzbw','pmvzbl','pmvzbq',
        'pop','popb','popw','popl','popq',
        'popa',
        'popal',
        'popaw',
        'popf',
        'popfd','popfl',
        'popfq',
        'popfw',
        'por','porb','porw','porl','porq',
        'prefetch','prefetchb','prefetchw','prefetchl','prefetchq',
        'prefetchw','prefetchwb','prefetchww','prefetchwl','prefetchwq',
        'pslld','pslldb','pslldw','pslldl','pslldq',
        'psllq','psllqb','psllqw','psllql','psllqq',
        'psllw','psllwb','psllww','psllwl','psllwq',
        'psrad','psradb','psradw','psradl','psradq',
        'psraw','psrawb','psraww','psrawl','psrawq',
        'psrld','psrldb','psrldw','psrldl','psrldq',
        'psrlq','psrlqb','psrlqw','psrlql','psrlqq',
        'psrlw','psrlwb','psrlww','psrlwl','psrlwq',
        'psubb','psubbb','psubbw','psubbl','psubbq',
        'psubd','psubdb','psubdw','psubdl','psubdq',
        'psubsb','psubsbb','psubsbw','psubsbl','psubsbq',
        'psubsiw','psubsiwb','psubsiww','psubsiwl','psubsiwq',
        'psubsw','psubswb','psubsww','psubswl','psubswq',
        'psubusb','psubusbb','psubusbw','psubusbl','psubusbq',
        'psubusw','psubuswb','psubusww','psubuswl','psubuswq',
        'psubw','psubwb','psubww','psubwl','psubwq',
        'punpckhbw','punpckhbwb','punpckhbww','punpckhbwl','punpckhbwq',
        'punpckhdq','punpckhdqb','punpckhdqw','punpckhdql','punpckhdqq',
        'punpckhwd','punpckhwdb','punpckhwdw','punpckhwdl','punpckhwdq',
        'punpcklbw','punpcklbwb','punpcklbww','punpcklbwl','punpcklbwq',
        'punpckldq','punpckldqb','punpckldqw','punpckldql','punpckldqq',
        'punpcklwd','punpcklwdb','punpcklwdw','punpcklwdl','punpcklwdq',
        'push','pushb','pushw','pushl','pushq',
        'pusha',
        'pushal',
        'pushaw',
        'pushf',
        'pushfd',
        'pushfq',
        'pushfw',
        'pxor','pxorb','pxorw','pxorl','pxorq',
        'rcl','rclb','rclw','rcll','rclq',
        'rcr','rcrb','rcrw','rcrl','rcrq',
        'rdshr',
        'rdmsr',
        'rdpmc',
        'rdtsc',
        'rdtscp',
        'ret','retb','retw','retl','retq',
        'retf','retfb','retfw','retfl','retfq',
        'retn','retnb','retnw','retnl','retnq',
        'rol','rolb','rolw','roll','rolq',
        'ror','rorb','rorw','rorl','rorq',
        'rdm',
        'rsdc','rsdcb','rsdcw','rsdcl','rsdcq',
        'rsldt','rsldtb','rsldtw','rsldtl','rsldtq',
        'rsm',
        'rsts','rstsb','rstsw','rstsl','rstsq',
        'sahf',
        'sal','salb','salw','sall','salq',
        'salc',
        'sar','sarb','sarw','sarl','sarq',
        'sbb','sbbb','sbbw','sbbl','sbbq',
        'scasb',
        'scasd',
        'scasq',
        'scasw',
        'sfence',
        'sgdt','sgdtb','sgdtw','sgdtl','sgdtq',
        'shl','shlb','shlw','shll','shlq',
        'shld',
        'shr','shrb','shrw','shrl','shrq',
        'shrd',
        'sidt','sidtb','sidtw','sidtl','sidtq',
        'sldt',
        'skinit',
        'smi',
        'smint',
        'smintold',
        'smsw',
        'stc',
        'std',
        'stgi',
        'sti',
        'stosb',
        'stosd','stosl',
        'stosq',
        'stosw',
        'str',
        'sub','subb','subw','subl','subq',
        'svdc','svdcb','svdcw','svdcl','svdcq',
        'svldt','svldtb','svldtw','svldtl','svldtq',
        'svts','svtsb','svtsw','svtsl','svtsq',
        'swapgs',
        'syscall',
        'sysenter',
        'sysexit',
        'sysret',
        'test','testb','testw','testl','testq',
        'ud0',
        'ud1',
        'ud2b',
        'ud2',
        'ud2a',
        'umov',
        'verr',
        'verw',
        'fwait',
        'wbinvd',
        'wrshr',
        'wrmsr',
        'xadd',
        'xbts',
        'xchg',
        'xlatb',
        'xlat',
        'xor','xorb','xorw','xorl','xorq',
        'cmovcc',

        'je','jne','ja','jae','jb','jbe','jnbe','jg','jge','jng','jnge','jl','jle','jz','jnz','jc','jnc','jd','jnd','jo','jno','jp','jnp','js','jns',
        'jeb','jneb','jab','jaeb','jbb','jbeb','jnbeb','jgb','jgeb','jngb','jngeb','jlb','jleb','jzb','jnzb','jcb','jncb','jdb','jndb','job','jnob','jpb','jnpb','jsb','jnsb',
        'jew','jnew','jaw','jaew','jbw','jbew','jnbew','jgw','jgew','jngw','jngew','jlw','jlew','jzw','jnzw','jcw','jncw','jdw','jndw','jow','jnow','jpw','jnpw','jsw','jnsw',
        'jel','jnel','jal','jael','jbl','jbel','jnbel','jgl','jgel','jngl','jngel','jll','jlel','jzl','jnzl','jcl','jncl','jdl','jndl','jol','jnol','jpl','jnpl','jsl','jnsl',
        'jeq','jneq','jaq','jaeq','jbq','jbeq','jnbeq','jgq','jgeq','jngq','jngeq','jlq','jleq','jzq','jnzq','jcq','jncq','jdq','jndq','joq','jnoq','jpq','jnpq','jsq','jnsq',

        'ljmp',
        'rep', 'stos',

        'addr32',
    ]

    def dqualifier(self, c):
        return self.cKeywordQualifier(c) or c == '.' or c == ord('.')

    def rqualifier(self, c):
        return self.cKeywordQualifier(c) or c == '%' or c == ord('%')

    def paintCComment(self):
        let last = None
        while self[0] != None:
            if self.commentBuzzwords(): continue
            else if last == '*' and self[0] == '/':
                self.paint(1, self.FLAG_COMMENT)
                return 0
            else:
                last = self[0]
                self.paint(1, self.FLAG_COMMENT)
        return 1

    def paintCNumeral(self):
        if self[0] == '0' and (self[1] == 'x' or self[1] == 'X'):
            self.paint(2, self.FLAG_NUMERAL)
            while self.isxdigit(self[0]): self.paint(1, self.FLAG_NUMERAL)
        else if self[0] == '0' and self[1] == '.':
            self.paint(2, self.FLAG_NUMERAL)
            while self.isdigit(self[0]): self.paint(1, self.FLAG_NUMERAL)
            if self[0] == 'f': self.paint(1, self.FLAG_NUMERAL)
            return 0
        else if self[0] == '0':
            self.paint(1, self.FLAG_NUMERAL)
            while self[0] in '01234567': self.paint(1, self.FLAG_NUMERAL)
        else:
            while self.isdigit(self[0]): self.paint(1, self.FLAG_NUMERAL)
            if self[0] == '.':
                self.paint(1, self.FLAG_NUMERAL)
                while self.isdigit(self[0]): self.paint(1, self.FLAG_NUMERAL)
                if self[0] == 'f': self.paint(1, self.FLAG_NUMERAL)
                return 0
        while self[0] in 'uUlL': self.paint(1, self.FLAG_NUMERAL)
        return 0

    def calculate(self):
        if self.state <= 0:
            if self[0] == '/' and self[1] == '/':
                while self[0]: self.paint(1, self.FLAG_COMMENT)
            else if self[0] == '/' and self[1] == '*':
                self.paint(2, self.FLAG_COMMENT)
                return self.paintCComment()
            else if not self.cKeywordQualifier(self[-1]) and self.isdigit(self[0]):
                self.paintCNumeral()
                return 0
            else if self[0] == '.':
                if self.findKeywords(self.directives, self.FLAG_KEYWORD, self.dqualifier):
                    return 0
                else if self.findKeywords(self.types, self.FLAG_PRAGMA, self.dqualifier):
                    return 0
                else:
                    self.skip()
                    return 0
            else if self[0] == '%':
                if self.findKeywords(self.registers, self.FLAG_ESCAPE, self.rqualifier):
                    return 0
                else:
                    self.skip()
                    return 0
            else if not self.cKeywordQualifier(self[-1]) and self.isalpha(self[0]):
                if self.findKeywords(self.instructions, self.FLAG_TYPE, self.cKeywordQualifier):
                    return 0
                self.skip()
                return 0
            else if self[0] == '"':
                self.paintSimpleString()
                return 0
            else if self[0] == "'":
                self.paintSingleString()
                return 0
            else if self[0] != None:
                self.skip()
                return 0
        else if self.state == 1:
            return self.paintCComment()
        return None


