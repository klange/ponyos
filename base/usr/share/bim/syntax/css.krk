from syntax import Highlighter, bind
from syntax.c import CHighlighter

class CSSHighlighter(Highlighter):
    name = 'css'
    extensions = ('.css', '.scss')
    elements = [
        "a","abbr","address","area","article","aside","audio",
        "b","base","bdi","bdo","blockquote","body","br","button",
        "canvas","cite","code","col","colgroup","data","datalist",
        "dd","del","details","dfn","dialog","div","dl","dt","em",
        "embed","fieldset","figcaption","figure","footer","form",
        "h1","h2","h3","h4","h5","h6","head","header","hr","html",
        "i","iframe","img","input","ins","kbd","label","legend",
        "li","link","main","map","mark","meta","meter","nav",
        "noscript","object","ol","optgroup","option","output",
        "p","param","picture","pre","progress","q","rp","rt",
        "ruby","s","samp","script","section","select","small",
        "source","span","strong","style","sub","summary","sup",
        "svg","table","tbody","td","template","textarea","tfoot",
        "th","thead","time","title","tr","track","u","ul","var",
        "video","wbr","hgroup","*",
    ]
    properties = [
        "align-content","align-items","align-self","all","animation",
        "animation-delay","animation-direction","animation-duration",
        "animation-fill-mode","animation-iteration-count","animation-name",
        "animation-play-state","animation-timing-function","backface-visibility",
        "background","background-attachment","background-blend-mode","background-clip",
        "background-color","background-image","background-origin","background-position",
        "background-repeat","background-size","border","border-bottom","border-bottom-color",
        "border-bottom-left-radius","border-bottom-right-radius","border-bottom-style",
        "border-bottom-width","border-collapse","border-color","border-image","border-image-outset",
        "border-image-repeat","border-image-slice","border-image-source","border-image-width",
        "border-left","border-left-color","border-left-style","border-left-width",
        "border-radius","border-right","border-right-color","border-right-style","border-right-width",
        "border-spacing","border-style","border-top","border-top-color","border-top-left-radius",
        "border-top-right-radius","border-top-style","border-top-width","border-width",
        "bottom","box-decoration-break","box-shadow","box-sizing","break-after",
        "break-before","break-inside","caption-side","caret-color","@charset",
        "clear","clip","color","column-count","column-fill","column-gap","column-rule","column-rule-color",
        "column-rule-style","column-rule-width","column-span","column-width","columns","content",
        "counter-increment","counter-reset","cursor","direction","display","empty-cells",
        "filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink",
        "flex-wrap","float","font","@font-face","font-family","font-feature-settings","@font-feature-values",
        "font-kerning","font-language-override","font-size","font-size-adjust","font-stretch","font-style",
        "font-synthesis","font-variant","font-variant-alternates","font-variant-caps","font-variant-east-asian",
        "font-variant-ligatures","font-variant-numeric","font-variant-position","font-weight",
        "grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column",
        "grid-column-end","grid-column-gap","grid-column-start","grid-gap","grid-row","grid-row-end",
        "grid-row-gap","grid-row-start","grid-template","grid-template-areas","grid-template-columns",
        "grid-template-rows","hanging-punctuation","height","hyphens","image-rendering","@import",
        "isolation","justify-content","@keyframes","left","letter-spacing","line-break","line-height",
        "list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom",
        "margin-left","margin-right","margin-top","max-height","max-width","@media","min-height",
        "min-width","mix-blend-mode","object-fit","object-position","opacity","order","orphans",
        "outline","outline-color","outline-offset","outline-style","outline-width","overflow",
        "overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right",
        "padding-top","page-break-after","page-break-before","page-break-inside","perspective",
        "perspective-origin","pointer-events","position","quotes","resize","right","scroll-behavior",
        "tab-size","table-layout","text-align","text-align-last","text-combine-upright","text-decoration",
        "text-decoration-color","text-decoration-line","text-decoration-style","text-indent","text-justify",
        "text-orientation","text-overflow","text-shadow","text-transform","text-underline-position",
        "top","transform","transform-origin","transform-style","transition","transition-delay",
        "transition-duration","transition-property","transition-timing-function","unicode-bidi",
        "user-select","vertical-align","visibility","white-space","widows","width","word-break",
        "word-spacing","word-wrap","writing-mode","font-decoration",
    ]
    values = [
        "inline","block","inline-block","none","oblique",
        "transparent","thin","dotted","sans-serif",
        "rgb","rgba","bold","italic","underline","context-box",
        "monospace","serif","sans-serif","pre-wrap",
        "relative","baseline","hidden","solid","inherit","normal",
        "button","pointer","border-box","default","textfield",
        "collapse","top","bottom","avoid","table-header-group",
        "middle","absolute","rect","left","center","right",
        "ellipsis","nowrap","table","both","uppercase","lowercase","help",
        "static","table-cell","table-column","scroll","touch","auto",
        "not-allowed","inset","url","fixed","translate","alpha","fixed","device-width",
        "table-row",
    ]
    states = [
        "focus","active","hover","link","visited","before","after",
        "left","right","root","empty","target","enabled","disabled","checked","invalid",
        "first-child","nth-child","not","last-child",
    ]
    def propertyQualifier(c):
        if isinstance(c,int):
            if c <= 0: return False
            c = chr(c)
        return self.isalnum(c) or c in '-@*!'
    suffixes = [
        'pt','px','pc','em','cm','mm',
        'ex','in','vw','vh','ch','rem',
        'vmin','vmax','s'
    ]
    def matchSuffixes(suffixes):
        for s in suffixes:
            if self.matchPrefix(s):
                self.paint(len(s), self.FLAG_NUMERAL)
                return
    def calculate():
        if self.state < 1:
            if self[0] == '/' and self[1] == '*':
                if CHighlighter.paintCComment(self) == 1: return 1
            else if self[0] == '"':
                self.paintSimpleString()
                return 0
            else if self[-1] != '.' and self.findKeywords(self.elements, self.FLAG_KEYWORD, self.propertyQualifier):
                return 0
            else if self[-1] != '.' and self.findKeywords(self.properties, self.FLAG_TYPE, self.propertyQualifier):
                return 0
            else if self.matchPrefix('-moz-'):
                self.paint(5, self.FLAG_ESCAPE)
                while self[0] and self.propertyQualifier(self[0]): self.paint(1, self.FLAG_TYPE)
            else if self.matchPrefix('-webkit-'):
                self.paint(8, self.FLAG_ESCAPE)
                while self[0] and self.propertyQualifier(self[0]): self.paint(1, self.FLAG_TYPE)
            else if self.matchPrefix('-ms-'):
                self.paint(4, self.FLAG_ESCAPE)
                while self[0] and self.propertyQualifier(self[0]): self.paint(1, self.FLAG_TYPE)
            else if self.matchPrefix('-o-'):
                self.paint(3, self.FLAG_ESCAPE)
                while self[0] and self.propertyQualifier(self[0]): self.paint(1, self.FLAG_TYPE)
            else if self[0] == ':':
                self.skip()
                if self.findKeywords(self.states, self.FLAG_PRAGMA, self.propertyQualifier): return 0
                while self[0] and self[0] != ';':
                    if self.findKeywords(self.values, self.FLAG_NUMERAL, self.propertyQualifier):
                        continue
                    else if self[0] == '"':
                        self.paintSimpleString()
                        continue
                    else if self[0] == "'":
                        self.paintSingleString()
                        continue
                    else if self[0] == '{':
                        self.skip()
                        return 0
                    else if self[0] == '#':
                        self.paint(1, self.FLAG_NUMERAL)
                        while self.isxdigit(self[0]): self.paint(1, self.FLAG_NUMERAL)
                    else if self.isdigit(self[0]):
                        while self.isdigit(self[0]): self.paint(1, self.FLAG_NUMERAL)
                        if self[0] == '.':
                            self.paint(1, self.FLAG_NUMERAL)
                            while self.isdigit(self[0]): self.paint(1, self.FLAG_NUMERAL)
                        if self[0] == '%': self.paint(1, self.FLAG_NUMERAL)
                        else: self.matchSuffixes(self.suffixes)
                    else if self.matchAndPaint("!important", self.FLAG_PRAGMA, self.propertyQualifier):
                        continue
                    else if self[0]:
                        self.skip()
                return 0
            else if not self[0]:
                return None
            else:
                self.skip()
            return 0
        else if self.state == 1:
            if CHighlighter.paintCComment(self) == 1: return 1
            return 0
        return None

bind(CSSHighlighter)
