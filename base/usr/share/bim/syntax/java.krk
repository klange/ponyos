from syntax import Highlighter, bind
from syntax.c import CHighlighter

class JavaHighlighter(Highlighter):
    name = 'java'
    extensions = ('.java',)
    keywords = [
        "assert","break","case","catch","class","continue",
        "default","do","else","enum","exports","extends","finally",
        "for","if","implements","instanceof","interface","module","native",
        "new","requires","return","throws",
        "strictfp","super","switch","synchronized","this","throw","try","while",
    ]
    types = [
        "var","boolean","void","short","long","int","double","float","enum","char",
        "private","protected","public","static","final","transient","volatile","abstract",
    ]
    special = [
        "true","false","import","package","null",
    ]
    at_comments = [
        "@author","@see","@since","@return","@throws",
        "@version","@exception","@deprecated",
    ]
    brace_comments = [
        "{@docRoot","{@inheritDoc","{@link","{@linkplain",
        "{@value","{@code","{@literal","{@serial",
        "{@serialData","{@serialField",
    ]
    def atKeywordQualifier(c):
        if isinstance(c,int) and c > 0: c = chr(c)
        return self.isalnum(c) or c in '_@'
    def braceKeywordQualifier(c):
        if isinstance(c,int) and c > 0: c = chr(c)
        return self.isalnum(c) or c in '{@_'
    def keywordQualifier(c):
        return self.cKeywordQualifier(c)
    def paintJavaComment():
        let last
        while self[0]:
            if self.commentBuzzwords(): continue
            if self[0] == '@':
                if not self.findKeywords(self.at_comments, self.FLAG_ESCAPE, self.atKeywordQualifier):
                    if self.matchAndPaint('@param', self.FLAG_ESCAPE, self.atKeywordQualifier):
                        while self[0] == ' ': self.skip()
                        while self.cKeywordQualifier(self[0]): self.paint(1, self.FLAG_TYPE)
                    else:
                        self.paint(1, self.FLAG_COMMENT)
            else if self[0] == '{':
                if self.findKeywords(self.brace_comments, self.FLAG_ESCAPE, self.braceKeywordQualifier):
                    while self[0] != '}' and self[0]:
                        self.paint(1, self.FLAG_ESCAPE)
                    if self[0] == '}': self.paint(1, self.FLAG_ESCAPE)
                else:
                    self.paint(1, self.FLAG_COMMENT)
            else if self[0] == '<':
                let isTag = False
                for i = 1; self[i]; i++:
                    if self[i] == '>':
                        isTag = True
                        break
                    if not self.isalnum(self[i]) and self[i] != '/':
                        isTag = 0
                        break
                if isTag:
                    self.paint(1, self.FLAG_TYPE)
                    while self[0] and self[0] != '>':
                        if self[0] == '/': self.paint(1, self.FLAG_TYPE)
                        else: self.paint(1, self.FLAG_KEYWORD)
                    if self[0] == '>': self.paint(1, self.FLAG_TYPE)
                else:
                    self.paint(1, self.FLAG_COMMENT)
            else if last == '*' and self[0] == '/':
                self.paint(1, self.FLAG_COMMENT)
                return 0
            else:
                last = self[0]
                self.paint(1, self.FLAG_COMMENT)
        return 1
    def calculate():
        if self.state <= 0:
            if not self.cKeywordQualifier(self[-1]) and self.isdigit(self[0]):
                CHighlighter.paintCNumeral(self)
                return 0
            else if self[0] == '/' and self[1] == '/':
                self.paintComment()
            else if self[0] == '/' and self[1] == '*':
                if self.paintJavaComment() == 1: return 1
            else if self.findKeywords(self.keywords, self.FLAG_KEYWORD, self.keywordQualifier):
                return 0
            else if self.findKeywords(self.types, self.FLAG_TYPE, self.cKeywordQualifier):
                return 0
            else if self.findKeywords(self.special, self.FLAG_NUMERAL, self.cKeywordQualifier):
                return 0
            else if self[0] == '"':
                self.paintSimpleString()
                return 0
            else if self[0] == "'":
                CHighlighter.paintCChar(self)
                return 0
            else if self[0] == '@':
                self.paint(1, self.FLAG_PRAGMA)
                while self.cKeywordQualifier(self[0]): self.paint(1, self.FLAG_PRAGMA)
                return 0
            else if self[0]:
                self.skip()
                return 0
        else if self.state == 1:
            if self.paintJavaComment() == 1: return 1
            return 0
        return None

bind(JavaHighlighter)

class KotlinHighlighter(JavaHighlighter):
    name = 'kotlin'
    extensions = ('.kt',)
    keywords = [
        "as","as?","break","class","continue","do","else","false","for",
        "fun","if","in","!in","interface","is","!is","null","object",
        "package","return","super","this","throw","true","try","typealias",
        "typeof","val","var","when","while",
        "by","catch","constructor","delegate","dynamic","field","file",
        "finally","get","import","init","param","property","receiver",
        "set","setparam","where",
        "actual","abstract","annotation","companion","const",
        "crossinline","data","enum","expect","external","final",
        "infix","inner","internal","lateinit","noinline","open",
        "operator","out","override","private","protected","public",
        "reified","sealed","suspend","tailrec","vararg",
        "field","it","inline",
    ]
    types = [
        "Byte","Short","Int","Long",
        "Float","Double","String",
    ]
    specials = []
    def keywordQualifier(c):
        return self.isalnum(c) or c in '?!_'

bind(KotlinHighlighter)
